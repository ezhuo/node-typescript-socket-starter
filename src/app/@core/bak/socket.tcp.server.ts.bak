import { EventEmitter } from 'events';
import { Logger } from '../helpers';
import { Device } from './device.tcp';
import { ISocketOptions, IAdapter, IDevice, IDeviceSocket } from '../model';
import * as net from 'net';
import * as config from '../model/config';
const extend = require('node.extend');

export class SocketTcpServer extends EventEmitter {
  __opts: ISocketOptions;
  __deviceList: Array<IDeviceSocket> = [];
  __server: net.Server | undefined;
  __deviceAdapter: IAdapter | undefined;

  static _new(_opts: ISocketOptions, _callback: Function): SocketTcpServer {
    return new SocketTcpServer(_opts, _callback);
  }

  set Adapter(adapter: IAdapter | undefined) {
    this.__deviceAdapter = adapter;
  }

  get Adapter(): IAdapter | undefined {
    return this.__deviceAdapter;
  }

  constructor(_opts: ISocketOptions, _callback: Function) {
    super();

    //Merge default options with user options
    this.__opts = _opts;

    if (this.__opts.device_adapter === false) throw '没有发现适配器！';

    if (typeof this.__opts.device_adapter === 'string') {
      if (
        typeof config.__adaptersList__[this.__opts.device_adapter] ===
        'undefined'
      )
        throw '没有找到' + this.__opts.device_adapter + ' 适配器！';

      this.Adapter = config.__adaptersList__[this.__opts.device_adapter];
    } else {
      this.Adapter = this.__opts.device_adapter;
    }

    this.createServer(_callback);
  }

  createServer(_callback: Function): void {
    try {
      this.__server = net
        .createServer((client: net.Socket) => {
          try {
            const device: IDevice = new Device(this.Adapter, client, this);

            const socket: IDeviceSocket = extend(client, { device });
            this.__deviceList.push(socket);

            socket.on('data', (data: any) => {
              Logger.logTask('socket.data', data);
              device.emit('data', data);
            });

            // Remove the device from the list when it leaves
            socket.on('end', () => {
              this.__deviceList.splice(this.__deviceList.indexOf(socket), 1);
              device.emit('disconnected');
            });

            if (typeof _callback === 'function') _callback(device, client);

            device.emit('connected');
          } catch (err) {
            Logger.errorTask('bind.error', ...err);
          }
        })
        .listen(this.__opts.port);
    } catch (err) {
      Logger.errorTask('app.createServer.error', ...err);
    }
  }

  /* Search a device by ID */
  findDevice(deviceId: any): IDeviceSocket | undefined {
    let dev: any = undefined;
    for (const i in this.__deviceList) {
      dev = this.__deviceList[i].device;
      if (dev.uid === deviceId) {
        return dev;
      }
    }
    return dev;
  }

  /* SEND A MESSAGE TO DEVICE ID X */
  sendTo(deviceId: any, msg: any): void {
    const dev: IDeviceSocket | undefined = this.findDevice(deviceId);
    if (dev) dev.send(msg);
  }
}
